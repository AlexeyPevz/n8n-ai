/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å n8n - –¥–æ–±–∞–≤–ª—è–µ—Ç AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ n8n –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

import express from 'express';
import path from 'path';

export interface N8nAIIntegrationOptions {
  enabled?: boolean;
  uiPosition?: 'bottom' | 'right' | 'modal';
  orchestratorUrl?: string;
}

export class N8nAIIntegration {
  private options: N8nAIIntegrationOptions;

  constructor(options: N8nAIIntegrationOptions = {}) {
    this.options = {
      enabled: true,
      uiPosition: 'bottom',
      orchestratorUrl: 'http://localhost:3000',
      ...options
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n
   */
  async init(app: express.Application): Promise<void> {
    if (!this.options.enabled) return;

    console.log('ü§ñ Initializing n8n AI Integration...');

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã UI
    app.use('/ai-assets', express.static(path.join(__dirname, '../ui/dist')));

    // 2. –î–æ–±–∞–≤–ª—è–µ–º API –ø—Ä–æ–∫—Å–∏ –∫ orchestrator
    this.setupAPIProxy(app);

    // 3. –ò–Ω–∂–µ–∫—Ç–∏–º UI –≤ n8n —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.setupUIInjection(app);

    // 4. –î–æ–±–∞–≤–ª—è–µ–º AI routes
    this.setupAIRoutes(app);

    console.log('‚úÖ n8n AI Integration initialized successfully');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –ø—Ä–æ–∫—Å–∏ –∫ orchestrator
   */
  private setupAPIProxy(app: express.Application): void {
    const orchestratorUrl = this.options.orchestratorUrl!;

    // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è AI API
    app.use('/api/v1/ai', async (req, res) => {
      try {
        const targetUrl = `${orchestratorUrl}${req.path}`;
        const response = await fetch(targetUrl, {
          method: req.method,
          headers: {
            'Content-Type': 'application/json',
            ...(req.headers as Record<string, string>)
          },
          body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined
        });
        
        const data = await response.json();
        res.status(response.status).json(data);
      } catch (error) {
        res.status(500).json({ error: 'Failed to proxy request to orchestrator' });
      }
    });

    // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    app.use('/rest/ai', (req, res, next) => {
      req.url = req.url.replace('/rest/ai', '/api/v1/ai');
      next();
    });
  }

  /**
   * –ò–Ω–∂–µ–∫—Ü–∏—è UI –≤ n8n —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  private setupUIInjection(app: express.Application): void {
    const self = this;
    // Middleware –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏ AI UI
    app.use((req, res, next) => {
      const originalRender = res.render;
      
      res.render = function(view: string, options: any) {
        if (view === 'App' || view === 'index' || view === 'workflow') {
          // –î–æ–±–∞–≤–ª—è–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          options = options || {};
          options.aiEnabled = true;
          options.aiConfig = {
            position: self.options.uiPosition,
            apiUrl: '/api/v1/ai',
            orchestratorUrl: self.options.orchestratorUrl
          };
          
          // –ò–Ω–∂–µ–∫—Ç–∏–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
          const aiScripts = `
            <script src="/ai-assets/n8n-ai-panel.umd.js"></script>
            <link rel="stylesheet" href="/ai-assets/n8n-ai-panel.css">
            <script>
              window.N8N_AI_CONFIG = ${JSON.stringify(options.aiConfig)};
              // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –ø–∞–Ω–µ–ª—å
              if (window.N8nAIPanel) {
                window.N8nAIPanel.init(options.aiConfig);
              }
            </script>
          `;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ head –∏–ª–∏ body
          if (options.additionalScripts) {
            options.additionalScripts += aiScripts;
          } else {
            options.additionalScripts = aiScripts;
          }
        }
        
        return originalRender.call(this, view, options);
      };
      
      next();
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI routes
   */
  private setupAIRoutes(app: express.Application): void {
    // AI Tools endpoint
    app.get('/ai-tools', (req, res) => {
      res.render('ai-tools', {
        title: 'AI Tools',
        aiConfig: this.options
      });
    });

    // AI Workflow endpoint
    app.get('/ai-workflow/:id?', (req, res) => {
      const workflowId = req.params.id || 'new';
      res.render('ai-workflow', {
        title: 'AI Workflow',
        workflowId,
        aiConfig: this.options
      });
    });

    // AI Settings endpoint
    app.get('/ai-settings', (req, res) => {
      res.render('ai-settings', {
        title: 'AI Settings',
        aiConfig: this.options
      });
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
export function setupN8nAI(app: express.Application, options?: N8nAIIntegrationOptions): N8nAIIntegration {
  const integration = new N8nAIIntegration(options);
  integration.init(app);
  return integration;
}