#!/bin/bash

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç n8n-ai
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

set -e

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üéØ n8n-ai Demo - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º${NC}"
echo "=================================="
echo ""

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    echo -e "\n${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    pkill -f "tsx.*test-server" 2>/dev/null || true
    pkill -f "vite.*preview" 2>/dev/null || true
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    exit 0
}

trap cleanup INT TERM

echo -e "${BLUE}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...${NC}"
if pnpm build > /dev/null 2>&1; then
    echo -e "   ${GREEN}‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞${NC}"
else
    echo -e "   ${RED}‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏${NC}"
    exit 1
fi

echo -e "\n${BLUE}2. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

# –ó–∞–ø—É—Å–∫ orchestrator
echo -e "   ${YELLOW}–ó–∞–ø—É—Å–∫ Orchestrator...${NC}"
cd packages/n8n-ai-orchestrator
npx tsx src/test-server.ts > /tmp/orchestrator.log 2>&1 &
ORCH_PID=$!
cd ../..

# –ó–∞–ø—É—Å–∫ UI –ø–∞–Ω–µ–ª–∏
echo -e "   ${YELLOW}–ó–∞–ø—É—Å–∫ UI Panel...${NC}"
cd packages/n8n-ai-panel
npx vite preview --port 5173 --host 0.0.0.0 > /tmp/ui-panel.log 2>&1 &
UI_PID=$!
cd ../..

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo -e "   ${YELLOW}–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...${NC}"
for i in {1..20}; do
    if curl -s http://localhost:3000/api/v1/ai/health > /dev/null 2>&1; then
        break
    fi
    sleep 1
done

echo -e "\n${BLUE}3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...${NC}"

# Health check
if curl -s http://localhost:3000/api/v1/ai/health | grep -q "ok"; then
    echo -e "   ${GREEN}‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå Health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# Metrics check
if curl -s http://localhost:3000/api/v1/ai/metrics | grep -q "counters"; then
    echo -e "   ${GREEN}‚úÖ Metrics endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå Metrics endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# UI check
if curl -s http://localhost:5173 | grep -q "n8n AI Panel"; then
    echo -e "   ${GREEN}‚úÖ UI Panel —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå UI Panel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

echo -e "\n${BLUE}4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π...${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ workflow
echo -e "   ${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ AI workflow...${NC}"
RESPONSE=$(curl -s -X POST http://localhost:3000/plan \
  -H "Content-Type: application/json" \
  -d '{"prompt": "Create webhook that sends data to Slack"}')

if echo "$RESPONSE" | grep -q "ops"; then
    echo -e "   ${GREEN}‚úÖ AI workflow —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ${NC}"
    echo -e "   ${YELLOW}–û–ø–µ—Ä–∞—Ü–∏–π: $(echo "$RESPONSE" | grep -o '"ops"' | wc -l)${NC}"
else
    echo -e "   ${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI workflow${NC}"
fi

echo -e "\n${BLUE}5. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...${NC}"
echo -e "   ‚Ä¢ Orchestrator: ${GREEN}‚úì –†–∞–±–æ—Ç–∞–µ—Ç${NC} (–ø–æ—Ä—Ç 3000)"
echo -e "   ‚Ä¢ UI Panel:     ${GREEN}‚úì –†–∞–±–æ—Ç–∞–µ—Ç${NC} (–ø–æ—Ä—Ç 5173)"
echo -e "   ‚Ä¢ API:          ${GREEN}‚úì –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
echo -e "   ‚Ä¢ AI —Ñ—É–Ω–∫—Ü–∏–∏:   ${GREEN}‚úì –†–∞–±–æ—Ç–∞—é—Ç${NC}"

echo -e "\n${BLUE}6. –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:${NC}"
echo -e "   ‚Ä¢ UI Panel:     http://localhost:5173"
echo -e "   ‚Ä¢ API Health:   http://localhost:3000/api/v1/ai/health"
echo -e "   ‚Ä¢ API Metrics:  http://localhost:3000/api/v1/ai/metrics"

echo -e "\n${GREEN}üéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!${NC}"
echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏${NC}"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
tail -f /tmp/orchestrator.log /tmp/ui-panel.log 2>/dev/null || {
    echo -e "${YELLOW}–û–∂–∏–¥–∞–Ω–∏–µ...${NC}"
    wait
}