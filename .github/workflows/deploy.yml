name: Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push n8n-ai-hooks
        uses: docker/build-push-action@v5
        with:
          context: ./packages/n8n-ai-hooks
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/n8n-ai-hooks:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Build and push orchestrator
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/n8n-ai-orchestrator/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orchestrator:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.n8n-ai.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.build-and-push.outputs.version }} to staging"
          # Add actual deployment commands here
          # kubectl set image deployment/n8n-ai-orchestrator orchestrator=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orchestrator:${{ needs.build-and-push.outputs.version }}

  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://n8n-ai.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.build-and-push.outputs.version }} to production"
          # Add actual deployment commands here
          # kubectl set image deployment/n8n-ai-orchestrator orchestrator=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orchestrator:${{ needs.build-and-push.outputs.version }}
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true