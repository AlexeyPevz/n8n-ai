#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

echo "üìö Documentation Review"
echo "====================="
echo ""

# –ü–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TOTAL_DOCS=$(find docs -name "*.md" | wc -l)
MAIN_DOCS=$(find . -maxdepth 1 -name "*.md" | wc -l)

echo "üìÑ Documentation Files:"
echo "   Main directory: $MAIN_DOCS files"
echo "   Docs directory: $TOTAL_DOCS files"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
echo "‚úÖ Main Documentation:"
[ -f "README.md" ] && echo "   ‚úì README.md" || echo "   ‚úó README.md missing"
[ -f "CHANGELOG.md" ] && echo "   ‚úì CHANGELOG.md" || echo "   ‚úó CHANGELOG.md missing"
[ -f ".env.example" ] && echo "   ‚úì .env.example" || echo "   ‚úó .env.example missing"

echo ""
echo "üìñ Key Guides:"
[ -f "docs/QUICK_START.md" ] && echo "   ‚úì Quick Start Guide" || echo "   ‚úó Quick Start missing"
[ -f "docs/API_REFERENCE.md" ] && echo "   ‚úì API Reference" || echo "   ‚úó API Reference missing"
[ -f "docs/ARCHITECTURE.md" ] && echo "   ‚úì Architecture Guide" || echo "   ‚úó Architecture missing"
[ -f "docs/FAQ.md" ] && echo "   ‚úì FAQ" || echo "   ‚úó FAQ missing"
[ -f "docs/CURRENT_STATUS.md" ] && echo "   ‚úì Current Status" || echo "   ‚úó Status missing"

echo ""
echo "üìä Documentation Stats:"
# –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
TOTAL_LINES=$(find . -name "*.md" -not -path "./node_modules/*" -exec wc -l {} + | tail -1 | awk '{print $1}')
echo "   Total lines: $TOTAL_LINES"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TODO –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX" docs --include="*.md" | wc -l)
echo "   TODOs in docs: $TODO_COUNT"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ .md —Ñ–∞–π–ª—ã)
echo ""
echo "üîó Checking internal links..."
BROKEN_LINKS=0
for file in docs/*.md README.md; do
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ .md —Ñ–∞–π–ª—ã
    links=$(grep -oE '\[.*\]\(\..*\.md[^)]*\)' "$file" | grep -oE '\(\..*\.md[^)]*\)' | tr -d '()')
    for link in $links; do
        # –£–±–∏—Ä–∞–µ–º —è–∫–æ—Ä—è
        link_file=$(echo "$link" | cut -d'#' -f1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if [[ ! -f "$link_file" ]] && [[ ! -f "$(dirname "$file")/$link_file" ]]; then
            echo "   ‚úó Broken link in $file: $link"
            ((BROKEN_LINKS++))
        fi
    done
done

if [ $BROKEN_LINKS -eq 0 ]; then
    echo "   ‚úì All internal links valid"
fi

echo ""
echo "üìù Documentation Coverage:"
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
for pkg in packages/*/; do
    pkg_name=$(basename "$pkg")
    if [ -f "$pkg/README.md" ]; then
        echo "   ‚úì $pkg_name has README"
    else
        echo "   ‚úó $pkg_name missing README"
    fi
done

echo ""
echo "üéØ Summary:"
echo "   Total documentation files: $((TOTAL_DOCS + MAIN_DOCS))"
echo "   Total documentation lines: $TOTAL_LINES"
echo "   Documentation TODOs: $TODO_COUNT"
echo "   Broken internal links: $BROKEN_LINKS"

if [ $BROKEN_LINKS -eq 0 ] && [ $TODO_COUNT -lt 10 ]; then
    echo ""
    echo "‚úÖ Documentation is in good shape!"
else
    echo ""
    echo "‚ö†Ô∏è  Documentation needs attention"
fi