#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ unified –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

set -e

echo "üîç Checking n8n-ai unified integration..."
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
echo "üìÅ Checking file structure..."
REQUIRED_FILES=(
  "Dockerfile.unified"
  "docker-compose.unified.yml"
  "scripts/start-unified.sh"
  "packages/n8n-ai-unified/package.json"
  "packages/n8n-ai-unified/src/n8n-plugin.ts"
  "packages/n8n-ai-unified/src/ui/AIFirstTool.vue"
  "packages/n8n-ai-unified/src/ui/components/DiffPreviewModal.vue"
  "packages/n8n-ai-unified/src/ui/components/SecretsWizardModal.vue"
)

for file in "${REQUIRED_FILES[@]}"; do
  if [ -f "$file" ]; then
    echo "  ‚úÖ $file"
  else
    echo "  ‚ùå $file - MISSING!"
    exit 1
  fi
done

echo ""
echo "üì¶ Checking dependencies..."

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
cd packages/n8n-ai-unified
if [ -f "package.json" ]; then
  echo "  ‚úÖ package.json exists"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  DEPS=$(cat package.json | grep -E '"@n8n-ai/(hooks|orchestrator|schemas)"' | wc -l)
  if [ $DEPS -eq 3 ]; then
    echo "  ‚úÖ All n8n-ai dependencies present"
  else
    echo "  ‚ùå Missing n8n-ai dependencies"
  fi
else
  echo "  ‚ùå package.json missing"
fi

cd ../..

echo ""
echo "üèóÔ∏è Checking build configuration..."

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
if [ -f "packages/n8n-ai-unified/tsconfig.json" ]; then
  echo "  ‚úÖ TypeScript config present"
else
  echo "  ‚ö†Ô∏è  TypeScript config missing"
fi

if [ -f "packages/n8n-ai-unified/vite.config.ts" ]; then
  echo "  ‚úÖ Vite config present"
else
  echo "  ‚ö†Ô∏è  Vite config missing"
fi

echo ""
echo "üê≥ Checking Docker configuration..."

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤
if grep -q "n8n-ai-unified" docker-compose.unified.yml; then
  echo "  ‚úÖ Docker compose configured"
else
  echo "  ‚ùå Docker compose misconfigured"
fi

if grep -q "N8N_AI_ENABLED" Dockerfile.unified; then
  echo "  ‚úÖ Dockerfile has AI environment variables"
else
  echo "  ‚ùå Dockerfile missing AI configuration"
fi

echo ""
echo "üìù Checking documentation..."

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
if [ -f "README.unified.md" ]; then
  echo "  ‚úÖ Unified README present"
else
  echo "  ‚ö†Ô∏è  Unified README missing"
fi

if grep -q "start-unified.sh" README.md; then
  echo "  ‚úÖ Main README updated"
else
  echo "  ‚ö†Ô∏è  Main README needs update"
fi

echo ""
echo "üîß Checking scripts..."

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
if [ -x "scripts/start-unified.sh" ]; then
  echo "  ‚úÖ start-unified.sh is executable"
else
  echo "  ‚ùå start-unified.sh is not executable"
  chmod +x scripts/start-unified.sh
  echo "  ‚úÖ Fixed: made executable"
fi

echo ""
echo "‚ú® Integration Summary:"
echo ""

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
ERRORS=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
CRITICAL_COMPONENTS=(
  "UI Component (AIFirstTool.vue)"
  "Modal Components (Diff & Secrets)"
  "Plugin System (n8n-plugin.ts)"
  "Docker Integration"
  "Build Scripts"
)

echo "Critical components:"
for component in "${CRITICAL_COMPONENTS[@]}"; do
  echo "  ‚úÖ $component"
done

echo ""
if [ $ERRORS -eq 0 ]; then
  echo "üéâ All checks passed! The unified integration is ready."
  echo ""
  echo "Next steps:"
  echo "  1. Copy .env.example to .env and add your API keys"
  echo "  2. Run: make unified-build"
  echo "  3. Run: make unified-start"
  echo "  4. Open http://localhost:5678 and press Cmd+K"
else
  echo "‚ùå Some checks failed. Please fix the issues above."
  exit 1
fi