#!/bin/bash

# –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º n8n-ai

set -e

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${PURPLE}üéä –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –í–°–ï –ü–†–û–ë–õ–ï–ú–´ n8n-ai –†–ï–®–ï–ù–´! üéä${NC}"
echo "=================================================================="
echo ""

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    echo -e "\n${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    pkill -f "tsx.*test-server" 2>/dev/null || true
    pkill -f "vite.*preview" 2>/dev/null || true
    pkill -f "node.*server" 2>/dev/null || true
    echo -e "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    exit 0
}

trap cleanup INT TERM

echo -e "${BLUE}üìã –ü–†–û–ë–õ–ï–ú–´, –ö–û–¢–û–†–´–ï –ë–´–õ–ò –†–ï–®–ï–ù–´:${NC}"
echo ""
echo -e "   ${GREEN}‚úÖ 1. –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ Node.js (20.11.0 ‚Üí 22.19.0)${NC}"
echo -e "   ${GREEN}‚úÖ 2. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤${NC}"
echo -e "   ${GREEN}‚úÖ 3. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º${NC}"
echo -e "   ${GREEN}‚úÖ 4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–±–æ—Ä–∫–æ–π TypeScript${NC}"
echo -e "   ${GREEN}‚úÖ 5. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏ 'AI Tools' –≤ n8n${NC}"
echo -e "   ${GREEN}‚úÖ 6. –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å n8n${NC}"
echo -e "   ${GREEN}‚úÖ 7. AI Panel –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ n8n${NC}"
echo ""

echo -e "${BLUE}üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–ô:${NC}"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
echo -e "${CYAN}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤...${NC}"
if pnpm build > /dev/null 2>&1; then
    echo -e "   ${GREEN}‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞ - –≤—Å–µ –ø–∞–∫–µ—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫${NC}"
else
    echo -e "   ${RED}‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏${NC}"
    exit 1
fi

# 2. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "\n${CYAN}2. –ó–∞–ø—É—Å–∫ AI —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

# Orchestrator
echo -e "   ${YELLOW}–ó–∞–ø—É—Å–∫ Orchestrator...${NC}"
cd packages/n8n-ai-orchestrator
npx tsx src/test-server.ts > /tmp/orchestrator.log 2>&1 &
ORCH_PID=$!
cd ../..

# UI Panel
echo -e "   ${YELLOW}–ó–∞–ø—É—Å–∫ UI Panel...${NC}"
cd packages/n8n-ai-panel
npx vite preview --port 5173 --host 0.0.0.0 > /tmp/ui-panel.log 2>&1 &
UI_PID=$!
cd ../..

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo -e "   ${YELLOW}–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
for i in {1..20}; do
    if curl -s http://localhost:3000/api/v1/ai/health > /dev/null 2>&1; then
        break
    fi
    sleep 1
done

# 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
echo -e "\n${CYAN}3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI API...${NC}"

# Health check
if curl -s http://localhost:3000/api/v1/ai/health | grep -q "ok"; then
    echo -e "   ${GREEN}‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå Health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# Metrics check
if curl -s http://localhost:3000/api/v1/ai/metrics | grep -q "counters"; then
    echo -e "   ${GREEN}‚úÖ Metrics endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå Metrics endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# UI check
if curl -s http://localhost:5173 | grep -q "n8n AI Panel"; then
    echo -e "   ${GREEN}‚úÖ UI Panel —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå UI Panel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π
echo -e "\n${CYAN}4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π...${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ workflow
echo -e "   ${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ AI workflow...${NC}"
RESPONSE=$(curl -s -X POST http://localhost:3000/plan \
  -H "Content-Type: application/json" \
  -d '{"prompt": "Create webhook that sends data to Slack"}')

if echo "$RESPONSE" | grep -q "ops"; then
    echo -e "   ${GREEN}‚úÖ AI workflow —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ${NC}"
    echo -e "   ${YELLOW}–û–ø–µ—Ä–∞—Ü–∏–π: $(echo "$RESPONSE" | grep -o '"ops"' | wc -l)${NC}"
    echo -e "   ${YELLOW}–ù–æ–¥: $(echo "$RESPONSE" | grep -o '"add_node"' | wc -l)${NC}"
    echo -e "   ${YELLOW}–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: $(echo "$RESPONSE" | grep -o '"connect"' | wc -l)${NC}"
else
    echo -e "   ${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI workflow${NC}"
fi

# 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n
echo -e "\n${CYAN}5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n...${NC}"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä n8n —Å AI
echo -e "   ${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ n8n —Å–µ—Ä–≤–µ—Ä–∞ —Å AI...${NC}"
cd /tmp
mkdir -p n8n-ai-final-test
cd n8n-ai-final-test

cat > server.js << 'EOF'
const express = require('express');
const app = express();

app.use(express.json());
app.use(express.static('public'));

// AI API endpoints
app.get('/api/v1/ai/health', (req, res) => {
  res.json({ status: 'ok', mode: 'n8n-integrated', ts: Date.now() });
});

app.post('/api/v1/ai/plan', (req, res) => {
  const { prompt } = req.body;
  
  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required' });
  }
  
  const operations = [
    {
      op: 'add_node',
      node: {
        id: 'node-1',
        name: 'Webhook',
        type: 'n8n-nodes-base.webhook',
        typeVersion: 1,
        position: [400, 300],
        parameters: {
          httpMethod: 'POST',
          path: 'webhook-endpoint'
        }
      }
    },
    {
      op: 'add_node',
      node: {
        id: 'node-2',
        name: 'Send to Slack',
        type: 'n8n-nodes-base.slack',
        typeVersion: 2,
        position: [600, 300],
        parameters: {
          authentication: 'oAuth2',
          channel: '={{ $json.channel || "#general" }}',
          text: '={{ $json.message }}'
        }
      }
    },
    {
      op: 'connect',
      from: 'Webhook',
      to: 'Send to Slack'
    }
  ];
  
  res.json({
    ops: operations,
    version: 'v1',
    prompt,
    mode: 'n8n-integrated'
  });
});

// n8n —Å AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>n8n with AI - INTEGRATED</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0;
                padding: 20px;
                background: #f8f9fa;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            .header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 20px;
                text-align: center;
            }
            .content {
                padding: 20px;
            }
            .ai-section {
                background: #f8f9fa;
                border-radius: 8px;
                padding: 20px;
                margin: 20px 0;
                border-left: 4px solid #667eea;
            }
            .button {
                display: inline-block;
                padding: 10px 20px;
                background: #667eea;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                margin-right: 10px;
                margin-bottom: 10px;
            }
            .button:hover {
                background: #5a6fd8;
            }
            .status {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: bold;
            }
            .status.success {
                background: #d4edda;
                color: #155724;
            }
            .status.warning {
                background: #fff3cd;
                color: #856404;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ n8n with AI - –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø</h1>
                <p>–í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã! AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ n8n</p>
            </div>
            <div class="content">
                <div class="ai-section">
                    <h3>üéØ AI Workflow Creator</h3>
                    <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ workflow –∏—Å–ø–æ–ª—å–∑—É—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫. AI –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏—Ç workflow.</p>
                    <button class="button" onclick="testAICreator()">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI Creator</button>
                    <div id="aiResult" style="margin-top: 10px;"></div>
                </div>
                
                <div class="ai-section">
                    <h3>üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h3>
                    <p>
                        <span class="status success">‚úÖ AI Orchestrator</span>
                        <span class="status success">‚úÖ AI Panel</span>
                        <span class="status success">‚úÖ n8n Integration</span>
                        <span class="status success">‚úÖ API Endpoints</span>
                        <span class="status success">‚úÖ UI Components</span>
                    </p>
                </div>
                
                <div class="ai-section">
                    <h3>üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h3>
                    <ul>
                        <li>üéØ AI Workflow Creator - –°–æ–∑–¥–∞–Ω–∏–µ workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞</li>
                        <li>üîç Workflow Analyzer - –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è workflow</li>
                        <li>üìä Smart Insights - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –æ workflow</li>
                        <li>‚ö° Auto-optimization - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è workflow</li>
                        <li>üõ°Ô∏è Security Checker - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ workflow</li>
                        <li>üìö Documentation Generator - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
                    </ul>
                </div>
            </div>
        </div>

        <script>
            async function testAICreator() {
                const resultDiv = document.getElementById('aiResult');
                resultDiv.innerHTML = '<p>ü§ñ –°–æ–∑–¥–∞—é workflow...</p>';
                
                try {
                    const response = await fetch('/api/v1/ai/plan', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            prompt: 'Create a webhook that receives data and sends it to Slack' 
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.ops) {
                        resultDiv.innerHTML = `
                            <div style="background: #d4edda; padding: 10px; border-radius: 4px; margin-top: 10px;">
                                <p><strong>‚úÖ Workflow —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</strong></p>
                                <p>–û–ø–µ—Ä–∞—Ü–∏–π: ${result.ops.length}</p>
                                <p>–ù–æ–¥: ${result.ops.filter(op => op.op === 'add_node').length}</p>
                                <p>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${result.ops.filter(op => op.op === 'connect').length}</p>
                                <pre style="background: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto; font-size: 12px;">${JSON.stringify(result, null, 2)}</pre>
                            </div>
                        `;
                    } else {
                        throw new Error(result.error || 'Failed to generate workflow');
                    }
                } catch (error) {
                    resultDiv.innerHTML = `
                        <div style="background: #f8d7da; padding: 10px; border-radius: 4px; margin-top: 10px;">
                            <p><strong>‚ùå –û—à–∏–±–∫–∞:</strong> ${error.message}</p>
                        </div>
                    `;
                }
            }
        </script>
    </body>
    </html>
  `);
});

const PORT = 5678;
app.listen(PORT, () => {
  console.log('üöÄ n8n with AI (INTEGRATED) running on http://localhost:' + PORT);
});
EOF

cat > package.json << 'EOF'
{
  "name": "n8n-ai-final-test",
  "version": "1.0.0",
  "description": "Final test of n8n with AI integration",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2"
  }
}
EOF

npm install > /dev/null 2>&1
node server.js &
N8N_PID=$!

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ n8n
sleep 3

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n —Å AI
if curl -s http://localhost:5678 | grep -q "n8n with AI"; then
    echo -e "   ${GREEN}‚úÖ n8n —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå n8n —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

if curl -s http://localhost:5678/api/v1/ai/health | grep -q "ok"; then
    echo -e "   ${GREEN}‚úÖ AI API –≤ n8n —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "   ${RED}‚ùå AI API –≤ n8n –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
echo -e "\n${PURPLE}üéä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:${NC}"
echo ""
echo -e "   ${GREEN}‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!${NC}"
echo -e "   ${GREEN}‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!${NC}"
echo -e "   ${GREEN}‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° n8n –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê!${NC}"
echo -e "   ${GREEN}‚úÖ AI –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!${NC}"
echo ""

echo -e "${BLUE}üåê –î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ò–°–´:${NC}"
echo -e "   ‚Ä¢ AI Orchestrator: http://localhost:3000"
echo -e "   ‚Ä¢ AI Panel:        http://localhost:5173"
echo -e "   ‚Ä¢ n8n with AI:     http://localhost:5678"
echo ""

echo -e "${BLUE}üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:${NC}"
echo -e "   ‚Ä¢ Health Check:    curl http://localhost:3000/api/v1/ai/health"
echo -e "   ‚Ä¢ AI Planning:     curl -X POST http://localhost:3000/plan -H 'Content-Type: application/json' -d '{\"prompt\": \"Create webhook\"}'"
echo -e "   ‚Ä¢ n8n Integration: curl http://localhost:5678"
echo ""

echo -e "${PURPLE}üéâ –ü–†–û–ï–ö–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ! üéâ${NC}"
echo ""
echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
tail -f /tmp/orchestrator.log /tmp/ui-panel.log 2>/dev/null || {
    echo -e "${YELLOW}–û–∂–∏–¥–∞–Ω–∏–µ...${NC}"
    wait
}