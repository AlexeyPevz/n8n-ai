#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

echo "üîç Checking for outdated documentation..."
echo "========================================"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
echo "üìÖ Checking dates in documents..."
echo ""

# –ò—â–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞—Ç—ã (–¥–æ —Å–µ–Ω—Ç—è–±—Ä—è 2025)
OLD_DATES=$(grep -r "2024\|2023\|January 2025\|February 2025\|March 2025\|April 2025\|May 2025\|June 2025\|July 2025\|August 2025" docs/ --include="*.md" || true)
if [ -n "$OLD_DATES" ]; then
    echo "‚ö†Ô∏è  Found potentially old dates:"
    echo "$OLD_DATES" | head -10
else
    echo "‚úÖ No old dates found"
fi

echo ""
echo "üì¶ Checking Sprint documents..."
# –ü—Ä–æ–≤–µ—Ä–∫–∞ Sprint –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏)
SPRINT_DOCS=$(ls docs/SPRINT*.md 2>/dev/null || true)
if [ -n "$SPRINT_DOCS" ]; then
    echo "Found sprint documents (may be historical):"
    for doc in $SPRINT_DOCS; do
        echo "  - $doc"
    done
fi

echo ""
echo "üîó Checking API endpoints against code..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è API endpoints
DOCUMENTED_ENDPOINTS=$(grep -E "(GET|POST|PUT|DELETE) /" docs/API*.md | grep -oE "/(api/)?[a-zA-Z0-9/_-]+" | sort -u)
CODE_ENDPOINTS=$(grep -r "router\.\|server\.\|app\." packages/*/src --include="*.ts" | grep -E "(get|post|put|delete)\(" | grep -oE "'/[^']*'" | tr -d "'" | sort -u)

echo "Documented endpoints: $(echo "$DOCUMENTED_ENDPOINTS" | wc -l)"
echo "Code endpoints: $(echo "$CODE_ENDPOINTS" | wc -l)"

echo ""
echo "üö® Checking for deprecated features..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∏—á
DEPRECATED=$(grep -r "fork\|n8n fork\|four terminals\|four windows" docs/ --include="*.md" | grep -v "historical" || true)
if [ -n "$DEPRECATED" ]; then
    echo "‚ö†Ô∏è  Found references to deprecated approach:"
    echo "$DEPRECATED" | head -5
else
    echo "‚úÖ No deprecated features mentioned"
fi

echo ""
echo "üìù Checking package.json versions..."

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ package.json
MAIN_VERSION=$(grep '"version"' package.json | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
DOC_VERSIONS=$(grep -r "version.*[0-9]\+\.[0-9]\+\.[0-9]\+" docs/ --include="*.md" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | sort -u)

echo "Main package version: $MAIN_VERSION"
echo "Versions mentioned in docs: $DOC_VERSIONS"

echo ""
echo "üîç Checking for outdated examples..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
OLD_IMPORTS=$(grep -r "from '\./.*'" docs/ --include="*.md" | grep -v "\.js'" || true)
if [ -n "$OLD_IMPORTS" ]; then
    echo "‚ö†Ô∏è  Found imports without .js extension:"
    echo "$OLD_IMPORTS" | head -3
fi

echo ""
echo "üìä Checking for stub/mock references..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≥–ª—É—à–µ–∫ (–∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–¥–∞–ª–∏–ª–∏)
STUBS=$(grep -r "stub\|mock\|–∑–∞–≥–ª—É—à–∫" docs/ --include="*.md" | grep -v "no stubs\|removed stubs\|without stubs" || true)
if [ -n "$STUBS" ]; then
    echo "‚ö†Ô∏è  Found references to stubs/mocks:"
    echo "$STUBS" | head -5
else
    echo "‚úÖ No problematic stub references"
fi

echo ""
echo "üèóÔ∏è Checking architecture references..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
OLD_ARCH=$(grep -r "microservices\|separate services\|multiple ports" docs/ --include="*.md" | grep -v "unified\|single" || true)
if [ -n "$OLD_ARCH" ]; then
    echo "‚ö†Ô∏è  Found references to old architecture:"
    echo "$OLD_ARCH" | head -5
fi

echo ""
echo "üìà Summary of potential issues:"
echo "================================"

ISSUES=0

[ -n "$OLD_DATES" ] && echo "- Old dates found" && ((ISSUES++))
[ -n "$DEPRECATED" ] && echo "- Deprecated features mentioned" && ((ISSUES++))
[ -n "$OLD_IMPORTS" ] && echo "- Outdated import examples" && ((ISSUES++))
[ -n "$STUBS" ] && echo "- Stub/mock references" && ((ISSUES++))
[ -n "$OLD_ARCH" ] && echo "- Old architecture references" && ((ISSUES++))

if [ $ISSUES -eq 0 ]; then
    echo "‚úÖ No major outdated documentation found!"
else
    echo ""
    echo "‚ö†Ô∏è  Found $ISSUES potential issues to review"
fi